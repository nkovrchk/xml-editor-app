import pandas as pd
import app.utils as utils

filtered_categories = {
  "Происшествия": [
    "Банкротство Инвестбанка",
    "Дело о гибели младенца в роддоме №4",
    "Аварийный дом на Моспроспекте",
    "Смертельное ДТП под Янтарным",
    "Криминал",
    "Похоронное дело",
    "Убийство на Баранова",
    "Мошенничество",
    "Долги и штрафы",
    "ДТП",
    "Горящие машины",
    "Протест в Холмогоровке",
    "Происшествия",
    "Военные",
    "Велодвижение"
  ],
  "Здоровье": [
    "Медицина",
    "Пандемия коронавируса",
    "Здоровый образ жизни",
    "Онкоцентр",
    "Кройцаптека",
    "Продовольствие"
  ],
  "Общество": [
    "Пенсии",
    "Новости Автотора",
    "Новости Польши",
    "Новости Литвы",
    "Новости Светлого",
    "Спортклубы",
    "ЧМ-2018",
    "Спорт",
    "Уничтожение продуктов",
    "Общество",
    "Акции и протесты",
    "Работа",
    "ЖКХ",
    "Балтика",
  ],
  "Политика": [
    "Безопасность",
    "Розыск",
    "Визы",
    "Миграция",
    "Религия",
    "Коррупция",
    "Таможня",
    "Мусорная реформа",
    "Образование",
    "Электронные визы",
    "Общественный транспорт",
    "Социальные проблемы",
    "Международные отношения",
    "Дети",
    "Суды",
    "Политика",
    "Выборы",
    "Благоустройство",
    "Отставки и назначения",
    "Закупки",
    "Сельское хозяйство",
    "Граница",
    "Дороги",
    "Статистика"
  ],
  "Культура": [
    "Ветераны",
    "Культура",
    "Облик города",
    "Сердце города",
    "Театр эстрады",
    "Память",
    "Туризм",
    "Конкурсы",
    "Награды",
    "История и памятники",
    "Праздники",
    "Памятники Кёнигсберга",
    "Янтарь"
  ],
  "Экономика": [
    "Игорная зона",
    "Финансы",
    "Новости Сбербанка",
    "Финансовая Грамотность",
    "Бизнес",
    "Недвижимость",
    "Деловые новости",
    "Торговля и общепит"
  ],
  "Технологии": [
    "Госуслуги",
    "Технологии и связь",
    "Автомобили",
    "Новости Ростелекома",
    "Авиация",
    "Калининградский трамвай",
    "Промышленность"
  ],
  "Экология": [
    "Верхнее озеро",
    "Экономика и бизнес",
    "Пожары",
    "Животные",
    "Энергетика",
    "Природа",
    "Море",
    "Погода",
    "Экология",
    "Новости энергетики",
    "Придорожные деревья"
  ]
}

if __name__ == '__main__':
    categories = []
    texts = []

    grouped_texts = {}

    for gc in filtered_categories:
        grouped_texts[gc] = []

    repo = utils.read_repository()

    for k in repo:
        for gc in filtered_categories:
            category = repo[k]['category']
            text = repo[k]['text']
            if category in filtered_categories[gc] and text is not None:
                grouped_texts[gc].append(text)
                break

    min_length = 10000

    for gt in grouped_texts:
        length = len(grouped_texts[gt])
        if length < min_length:
            min_length = length

    for gt in grouped_texts:
        categories.extend([gt for i in range(min_length)])
        texts.extend(grouped_texts[gt][0:min_length])

    csv_data = pd.DataFrame(
        {'category': categories, 'text': texts})

    csv_data.to_csv('data/learning_sets.csv')
